/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package org.openmuc.openiec61850.internal.mms.asn1;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;

import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

public final class InformationReport {

    public final static class SubSeqOf_listOfAccessResult {

        public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
        protected BerIdentifier id;

        public byte[] code = null;
        public List<AccessResult> seqOf = null;

        public SubSeqOf_listOfAccessResult() {
            id = identifier;
        }

        public SubSeqOf_listOfAccessResult(byte[] code) {
            id = identifier;
            this.code = code;
        }

        public SubSeqOf_listOfAccessResult(List<AccessResult> seqOf) {
            id = identifier;
            this.seqOf = seqOf;
        }

        public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
            int codeLength;

            if (code != null) {
                codeLength = code.length;
                for (int i = code.length - 1; i >= 0; i--) {
                    berOStream.write(code[i]);
                }
            } else {
                codeLength = 0;
                for (int i = (seqOf.size() - 1); i >= 0; i--) {
                    codeLength += seqOf.get(i).encode(berOStream, true);
                }

                codeLength += BerLength.encodeLength(berOStream, codeLength);

            }

            if (explicit) {
                codeLength += id.encode(berOStream);
            }

            return codeLength;
        }

        public int decode(InputStream iStream, boolean explicit) throws IOException {
            int codeLength = 0;
            int subCodeLength = 0;
            seqOf = new LinkedList<AccessResult>();

            if (explicit) {
                codeLength += id.decodeAndCheck(iStream);
            }

            BerLength length = new BerLength();
            codeLength += length.decode(iStream);

            while (subCodeLength < length.val) {
                AccessResult element = new AccessResult();
                subCodeLength += element.decode(iStream, null);
                seqOf.add(element);
            }
            if (subCodeLength != length.val) {
                throw new IOException("Decoded SequenceOf or SetOf has wrong length tag");

            }
            codeLength += subCodeLength;

            return codeLength;
        }

        public void encodeAndSave(int encodingSizeGuess) throws IOException {
            BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
            encode(berOStream, false);
            code = berOStream.getArray();
        }
    }

    public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
    protected BerIdentifier id;

    public byte[] code = null;
    public VariableAccessSpecification variableAccessSpecification = null;

    public SubSeqOf_listOfAccessResult listOfAccessResult = null;

    public InformationReport() {
        id = identifier;
    }

    public InformationReport(byte[] code) {
        id = identifier;
        this.code = code;
    }

    public InformationReport(VariableAccessSpecification variableAccessSpecification, SubSeqOf_listOfAccessResult listOfAccessResult) {
        id = identifier;
        this.variableAccessSpecification = variableAccessSpecification;
        this.listOfAccessResult = listOfAccessResult;
    }

    public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

        int codeLength;

        if (code != null) {
            codeLength = code.length;
            for (int i = code.length - 1; i >= 0; i--) {
                berOStream.write(code[i]);
            }
        } else {
            codeLength = 0;
            codeLength += listOfAccessResult.encode(berOStream, false);
            codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)).encode(berOStream);

            codeLength += variableAccessSpecification.encode(berOStream, true);

            codeLength += BerLength.encodeLength(berOStream, codeLength);
        }

        if (explicit) {
            codeLength += id.encode(berOStream);
        }

        return codeLength;

    }

    public int decode(InputStream iStream, boolean explicit) throws IOException {
        int codeLength = 0;
        int subCodeLength = 0;
        int choiceDecodeLength = 0;
        BerIdentifier berIdentifier = new BerIdentifier();
        boolean decodedIdentifier = false;

        if (explicit) {
            codeLength += id.decodeAndCheck(iStream);
        }

        BerLength length = new BerLength();
        codeLength += length.decode(iStream);

        if (subCodeLength < length.val) {
            if (decodedIdentifier == false) {
                subCodeLength += berIdentifier.decode(iStream);
                decodedIdentifier = true;
            }
            variableAccessSpecification = new VariableAccessSpecification();
            choiceDecodeLength = variableAccessSpecification.decode(iStream, berIdentifier);
            if (choiceDecodeLength != 0) {
                decodedIdentifier = false;
                subCodeLength += choiceDecodeLength;
            }
        }
        if (subCodeLength < length.val) {
            if (decodedIdentifier == false) {
                subCodeLength += berIdentifier.decode(iStream);
                decodedIdentifier = true;
            }
            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
                listOfAccessResult = new SubSeqOf_listOfAccessResult();
                subCodeLength += listOfAccessResult.decode(iStream, false);
                decodedIdentifier = false;
            } else {
                throw new IOException("Identifier does not macht required sequence element identifer.");
            }
        }
        if (subCodeLength != length.val) {
            throw new IOException("Decoded sequence has wrong length tag");

        }
        codeLength += subCodeLength;

        return codeLength;
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(berOStream, false);
        code = berOStream.getArray();
    }
}
