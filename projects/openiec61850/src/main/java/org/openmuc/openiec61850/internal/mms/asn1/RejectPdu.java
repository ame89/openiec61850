/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package org.openmuc.openiec61850.internal.mms.asn1;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerInteger;

public final class RejectPdu {

	public final static class SubChoice_rejectReason {

		public byte[] code = null;
		public BerInteger confirmed_requestPDU = null;

		public BerInteger confirmed_responsePDU = null;

		public BerInteger confirmed_errorPDU = null;

		public BerInteger unconfirmedPDU = null;

		public BerInteger pdu_error = null;

		public BerInteger cancel_requestPDU = null;

		public BerInteger cancel_responsePDU = null;

		public BerInteger cancel_errorPDU = null;

		public BerInteger conclude_requestPDU = null;

		public BerInteger conclude_responsePDU = null;

		public BerInteger conclude_errorPDU = null;

		public SubChoice_rejectReason() {
		}

		public SubChoice_rejectReason(byte[] code) {
			this.code = code;
		}

		public SubChoice_rejectReason(BerInteger confirmed_requestPDU, BerInteger confirmed_responsePDU,
				BerInteger confirmed_errorPDU, BerInteger unconfirmedPDU, BerInteger pdu_error,
				BerInteger cancel_requestPDU, BerInteger cancel_responsePDU, BerInteger cancel_errorPDU,
				BerInteger conclude_requestPDU, BerInteger conclude_responsePDU, BerInteger conclude_errorPDU) {
			this.confirmed_requestPDU = confirmed_requestPDU;
			this.confirmed_responsePDU = confirmed_responsePDU;
			this.confirmed_errorPDU = confirmed_errorPDU;
			this.unconfirmedPDU = unconfirmedPDU;
			this.pdu_error = pdu_error;
			this.cancel_requestPDU = cancel_requestPDU;
			this.cancel_responsePDU = cancel_responsePDU;
			this.cancel_errorPDU = cancel_errorPDU;
			this.conclude_requestPDU = conclude_requestPDU;
			this.conclude_responsePDU = conclude_responsePDU;
			this.conclude_errorPDU = conclude_errorPDU;
		}

		public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					berOStream.write(code[i]);
				}
				return code.length;

			}
			int codeLength = 0;
			if (conclude_errorPDU != null) {
				codeLength += conclude_errorPDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 11))
						.encode(berOStream);
				return codeLength;

			}

			if (conclude_responsePDU != null) {
				codeLength += conclude_responsePDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 10))
						.encode(berOStream);
				return codeLength;

			}

			if (conclude_requestPDU != null) {
				codeLength += conclude_requestPDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 9))
						.encode(berOStream);
				return codeLength;

			}

			if (cancel_errorPDU != null) {
				codeLength += cancel_errorPDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 8))
						.encode(berOStream);
				return codeLength;

			}

			if (cancel_responsePDU != null) {
				codeLength += cancel_responsePDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 7))
						.encode(berOStream);
				return codeLength;

			}

			if (cancel_requestPDU != null) {
				codeLength += cancel_requestPDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 6))
						.encode(berOStream);
				return codeLength;

			}

			if (pdu_error != null) {
				codeLength += pdu_error.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 5))
						.encode(berOStream);
				return codeLength;

			}

			if (unconfirmedPDU != null) {
				codeLength += unconfirmedPDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4))
						.encode(berOStream);
				return codeLength;

			}

			if (confirmed_errorPDU != null) {
				codeLength += confirmed_errorPDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3))
						.encode(berOStream);
				return codeLength;

			}

			if (confirmed_responsePDU != null) {
				codeLength += confirmed_responsePDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2))
						.encode(berOStream);
				return codeLength;

			}

			if (confirmed_requestPDU != null) {
				codeLength += confirmed_requestPDU.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1))
						.encode(berOStream);
				return codeLength;

			}

			throw new IOException("Error encoding BerChoice: No item in choice was selected.");
		}

		public int decode(InputStream iStream, BerIdentifier berIdentifier) throws IOException {
			int codeLength = 0;
			BerIdentifier passedIdentifier = berIdentifier;
			if (berIdentifier == null) {
				berIdentifier = new BerIdentifier();
				codeLength += berIdentifier.decode(iStream);
			}
			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
				confirmed_requestPDU = new BerInteger();
				codeLength += confirmed_requestPDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)) {
				confirmed_responsePDU = new BerInteger();
				codeLength += confirmed_responsePDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)) {
				confirmed_errorPDU = new BerInteger();
				codeLength += confirmed_errorPDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)) {
				unconfirmedPDU = new BerInteger();
				codeLength += unconfirmedPDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 5)) {
				pdu_error = new BerInteger();
				codeLength += pdu_error.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 6)) {
				cancel_requestPDU = new BerInteger();
				codeLength += cancel_requestPDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 7)) {
				cancel_responsePDU = new BerInteger();
				codeLength += cancel_responsePDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 8)) {
				cancel_errorPDU = new BerInteger();
				codeLength += cancel_errorPDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 9)) {
				conclude_requestPDU = new BerInteger();
				codeLength += conclude_requestPDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 10)) {
				conclude_responsePDU = new BerInteger();
				codeLength += conclude_responsePDU.decode(iStream, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 11)) {
				conclude_errorPDU = new BerInteger();
				codeLength += conclude_errorPDU.decode(iStream, false);
				return codeLength;
			}

			if (passedIdentifier != null) {
				return 0;
			}
			throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(berOStream, false);
			code = berOStream.getArray();
		}
	}

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS,
			BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public BerInteger originalInvokeID = null;

	public SubChoice_rejectReason rejectReason = null;

	public RejectPdu() {
		id = identifier;
	}

	public RejectPdu(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public RejectPdu(BerInteger originalInvokeID, SubChoice_rejectReason rejectReason) {
		id = identifier;
		this.originalInvokeID = originalInvokeID;
		this.rejectReason = rejectReason;
	}

	public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				berOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += rejectReason.encode(berOStream, true);

			if (originalInvokeID != null) {
				codeLength += originalInvokeID.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0))
						.encode(berOStream);
			}

			codeLength += BerLength.encodeLength(berOStream, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(berOStream);
		}

		return codeLength;

	}

	public int decode(InputStream iStream, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		int choiceDecodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();
		boolean decodedIdentifier = false;

		if (explicit) {
			codeLength += id.decodeAndCheck(iStream);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(iStream);

		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
				originalInvokeID = new BerInteger();
				subCodeLength += originalInvokeID.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			rejectReason = new SubChoice_rejectReason();
			choiceDecodeLength = rejectReason.decode(iStream, berIdentifier);
			if (choiceDecodeLength != 0) {
				decodedIdentifier = false;
				subCodeLength += choiceDecodeLength;
			}
		}
		if (subCodeLength != length.val) {
			throw new IOException("Decoded sequence has wrong length tag");

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(berOStream, false);
		code = berOStream.getArray();
	}
}
