/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package org.openmuc.openiec61850.internal.mms.asn1;

import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerBoolean;
import org.openmuc.jasn1.ber.types.BerInteger;
import org.openmuc.jasn1.ber.types.BerNull;

public final class TypeSpecification {

	public byte[] code = null;

	public final static class SubSeq_array {

		public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS,
				BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public BerBoolean packed = null;

		public BerInteger numberOfElements = null;

		public TypeSpecification elementType = null;

		public SubSeq_array() {
			id = identifier;
		}

		public SubSeq_array(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public SubSeq_array(BerBoolean packed, BerInteger numberOfElements, TypeSpecification elementType) {
			id = identifier;
			this.packed = packed;
			this.numberOfElements = numberOfElements;
			this.elementType = elementType;
		}

		public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					berOStream.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				int sublength;

				sublength = elementType.encode(berOStream, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(berOStream, sublength);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2))
						.encode(berOStream);

				codeLength += numberOfElements.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1))
						.encode(berOStream);

				if (packed != null) {
					codeLength += packed.encode(berOStream, false);
					codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0))
							.encode(berOStream);
				}

				codeLength += BerLength.encodeLength(berOStream, codeLength);
			}

			if (explicit) {
				codeLength += id.encode(berOStream);
			}

			return codeLength;

		}

		public int decode(InputStream iStream, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			int choiceDecodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();
			boolean decodedIdentifier = false;

			if (explicit) {
				codeLength += id.decodeAndCheck(iStream);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(iStream);

			if (subCodeLength < length.val) {
				if (decodedIdentifier == false) {
					subCodeLength += berIdentifier.decode(iStream);
					decodedIdentifier = true;
				}
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
					packed = new BerBoolean();
					subCodeLength += packed.decode(iStream, false);
					decodedIdentifier = false;
				}
			}
			if (subCodeLength < length.val) {
				if (decodedIdentifier == false) {
					subCodeLength += berIdentifier.decode(iStream);
					decodedIdentifier = true;
				}
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
					numberOfElements = new BerInteger();
					subCodeLength += numberOfElements.decode(iStream, false);
					decodedIdentifier = false;
				}
				else {
					throw new IOException("Identifier does not macht required sequence element identifer.");
				}
			}
			if (subCodeLength < length.val) {
				if (decodedIdentifier == false) {
					subCodeLength += berIdentifier.decode(iStream);
					decodedIdentifier = true;
				}
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
					subCodeLength += new BerLength().decode(iStream);
					elementType = new TypeSpecification();
					choiceDecodeLength = elementType.decode(iStream, null);
					if (choiceDecodeLength != 0) {
						decodedIdentifier = false;
						subCodeLength += choiceDecodeLength;
					}
				}
				else {
					throw new IOException("Identifier does not macht required sequence element identifer.");
				}
			}
			if (subCodeLength != length.val) {
				throw new IOException("Decoded sequence has wrong length tag");

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(berOStream, false);
			code = berOStream.getArray();
		}
	}

	public final static class SubSeq_structure {

		public final static class SubSeqOf_components {

			public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS,
					BerIdentifier.CONSTRUCTED, 16);
			protected BerIdentifier id;

			public byte[] code = null;
			public List<StructComponent> seqOf = null;

			public SubSeqOf_components() {
				id = identifier;
			}

			public SubSeqOf_components(byte[] code) {
				id = identifier;
				this.code = code;
			}

			public SubSeqOf_components(List<StructComponent> seqOf) {
				id = identifier;
				this.seqOf = seqOf;
			}

			public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
				int codeLength;

				if (code != null) {
					codeLength = code.length;
					for (int i = code.length - 1; i >= 0; i--) {
						berOStream.write(code[i]);
					}
				}
				else {
					codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(berOStream, true);
					}

					codeLength += BerLength.encodeLength(berOStream, codeLength);

				}

				if (explicit) {
					codeLength += id.encode(berOStream);
				}

				return codeLength;
			}

			public int decode(InputStream iStream, boolean explicit) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				seqOf = new LinkedList<StructComponent>();

				if (explicit) {
					codeLength += id.decodeAndCheck(iStream);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(iStream);

				while (subCodeLength < length.val) {
					StructComponent element = new StructComponent();
					subCodeLength += element.decode(iStream, true);
					seqOf.add(element);
				}
				if (subCodeLength != length.val) {
					throw new IOException("Decoded SequenceOf or SetOf has wrong length tag");

				}
				codeLength += subCodeLength;

				return codeLength;
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
				encode(berOStream, false);
				code = berOStream.getArray();
			}
		}

		public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS,
				BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public BerBoolean packed = null;

		public SubSeqOf_components components = null;

		public SubSeq_structure() {
			id = identifier;
		}

		public SubSeq_structure(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public SubSeq_structure(BerBoolean packed, SubSeqOf_components components) {
			id = identifier;
			this.packed = packed;
			this.components = components;
		}

		public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					berOStream.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				codeLength += components.encode(berOStream, false);
				codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1))
						.encode(berOStream);

				if (packed != null) {
					codeLength += packed.encode(berOStream, false);
					codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0))
							.encode(berOStream);
				}

				codeLength += BerLength.encodeLength(berOStream, codeLength);
			}

			if (explicit) {
				codeLength += id.encode(berOStream);
			}

			return codeLength;

		}

		public int decode(InputStream iStream, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();
			boolean decodedIdentifier = false;

			if (explicit) {
				codeLength += id.decodeAndCheck(iStream);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(iStream);

			if (subCodeLength < length.val) {
				if (decodedIdentifier == false) {
					subCodeLength += berIdentifier.decode(iStream);
					decodedIdentifier = true;
				}
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
					packed = new BerBoolean();
					subCodeLength += packed.decode(iStream, false);
					decodedIdentifier = false;
				}
			}
			if (subCodeLength < length.val) {
				if (decodedIdentifier == false) {
					subCodeLength += berIdentifier.decode(iStream);
					decodedIdentifier = true;
				}
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
					components = new SubSeqOf_components();
					subCodeLength += components.decode(iStream, false);
					decodedIdentifier = false;
				}
				else {
					throw new IOException("Identifier does not macht required sequence element identifer.");
				}
			}
			if (subCodeLength != length.val) {
				throw new IOException("Decoded sequence has wrong length tag");

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(berOStream, false);
			code = berOStream.getArray();
		}
	}

	public final static class SubSeq_floating_point {

		public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS,
				BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public BerInteger format_width = null;

		public BerInteger exponent_width = null;

		public SubSeq_floating_point() {
			id = identifier;
		}

		public SubSeq_floating_point(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public SubSeq_floating_point(BerInteger format_width, BerInteger exponent_width) {
			id = identifier;
			this.format_width = format_width;
			this.exponent_width = exponent_width;
		}

		public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					berOStream.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				codeLength += exponent_width.encode(berOStream, true);

				codeLength += format_width.encode(berOStream, true);

				codeLength += BerLength.encodeLength(berOStream, codeLength);
			}

			if (explicit) {
				codeLength += id.encode(berOStream);
			}

			return codeLength;

		}

		public int decode(InputStream iStream, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();
			boolean decodedIdentifier = false;

			if (explicit) {
				codeLength += id.decodeAndCheck(iStream);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(iStream);

			if (subCodeLength < length.val) {
				if (decodedIdentifier == false) {
					subCodeLength += berIdentifier.decode(iStream);
					decodedIdentifier = true;
				}
				if (berIdentifier.equals(BerInteger.identifier)) {
					format_width = new BerInteger();
					subCodeLength += format_width.decode(iStream, false);
					decodedIdentifier = false;
				}
				else {
					throw new IOException("Identifier does not macht required sequence element identifer.");
				}
			}
			if (subCodeLength < length.val) {
				if (decodedIdentifier == false) {
					subCodeLength += berIdentifier.decode(iStream);
					decodedIdentifier = true;
				}
				if (berIdentifier.equals(BerInteger.identifier)) {
					exponent_width = new BerInteger();
					subCodeLength += exponent_width.decode(iStream, false);
					decodedIdentifier = false;
				}
				else {
					throw new IOException("Identifier does not macht required sequence element identifer.");
				}
			}
			if (subCodeLength != length.val) {
				throw new IOException("Decoded sequence has wrong length tag");

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(berOStream, false);
			code = berOStream.getArray();
		}
	}

	public SubSeq_array array = null;

	public SubSeq_structure structure = null;

	public BerNull boolean_ = null;

	public BerInteger bit_string = null;

	public BerInteger integer = null;

	public BerInteger unsigned = null;

	public SubSeq_floating_point floating_point = null;

	public BerInteger octet_string = null;

	public BerInteger visible_string = null;

	public BerBoolean binary_time = null;

	public BerInteger mms_string = null;

	public BerNull utc_time = null;

	public TypeSpecification() {
	}

	public TypeSpecification(byte[] code) {
		this.code = code;
	}

	public TypeSpecification(SubSeq_array array, SubSeq_structure structure, BerNull boolean_, BerInteger bit_string,
			BerInteger integer, BerInteger unsigned, SubSeq_floating_point floating_point, BerInteger octet_string,
			BerInteger visible_string, BerBoolean binary_time, BerInteger mms_string, BerNull utc_time) {
		this.array = array;
		this.structure = structure;
		this.boolean_ = boolean_;
		this.bit_string = bit_string;
		this.integer = integer;
		this.unsigned = unsigned;
		this.floating_point = floating_point;
		this.octet_string = octet_string;
		this.visible_string = visible_string;
		this.binary_time = binary_time;
		this.mms_string = mms_string;
		this.utc_time = utc_time;
	}

	public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				berOStream.write(code[i]);
			}
			return code.length;

		}
		int codeLength = 0;
		if (utc_time != null) {
			codeLength += utc_time.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 17))
					.encode(berOStream);
			return codeLength;

		}

		if (mms_string != null) {
			codeLength += mms_string.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 16))
					.encode(berOStream);
			return codeLength;

		}

		if (binary_time != null) {
			codeLength += binary_time.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 12))
					.encode(berOStream);
			return codeLength;

		}

		if (visible_string != null) {
			codeLength += visible_string.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 10))
					.encode(berOStream);
			return codeLength;

		}

		if (octet_string != null) {
			codeLength += octet_string.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 9))
					.encode(berOStream);
			return codeLength;

		}

		if (floating_point != null) {
			codeLength += floating_point.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 7))
					.encode(berOStream);
			return codeLength;

		}

		if (unsigned != null) {
			codeLength += unsigned.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 6))
					.encode(berOStream);
			return codeLength;

		}

		if (integer != null) {
			codeLength += integer.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 5))
					.encode(berOStream);
			return codeLength;

		}

		if (bit_string != null) {
			codeLength += bit_string.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4))
					.encode(berOStream);
			return codeLength;

		}

		if (boolean_ != null) {
			codeLength += boolean_.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3))
					.encode(berOStream);
			return codeLength;

		}

		if (structure != null) {
			codeLength += structure.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2))
					.encode(berOStream);
			return codeLength;

		}

		if (array != null) {
			codeLength += array.encode(berOStream, false);
			codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1))
					.encode(berOStream);
			return codeLength;

		}

		throw new IOException("Error encoding BerChoice: No item in choice was selected.");
	}

	public int decode(InputStream iStream, BerIdentifier berIdentifier) throws IOException {
		int codeLength = 0;
		BerIdentifier passedIdentifier = berIdentifier;
		if (berIdentifier == null) {
			berIdentifier = new BerIdentifier();
			codeLength += berIdentifier.decode(iStream);
		}
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
			array = new SubSeq_array();
			codeLength += array.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
			structure = new SubSeq_structure();
			codeLength += structure.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)) {
			boolean_ = new BerNull();
			codeLength += boolean_.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)) {
			bit_string = new BerInteger();
			codeLength += bit_string.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 5)) {
			integer = new BerInteger();
			codeLength += integer.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 6)) {
			unsigned = new BerInteger();
			codeLength += unsigned.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 7)) {
			floating_point = new SubSeq_floating_point();
			codeLength += floating_point.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 9)) {
			octet_string = new BerInteger();
			codeLength += octet_string.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 10)) {
			visible_string = new BerInteger();
			codeLength += visible_string.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 12)) {
			binary_time = new BerBoolean();
			codeLength += binary_time.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 16)) {
			mms_string = new BerInteger();
			codeLength += mms_string.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 17)) {
			utc_time = new BerNull();
			codeLength += utc_time.decode(iStream, false);
			return codeLength;
		}

		if (passedIdentifier != null) {
			return 0;
		}
		throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(berOStream, false);
		code = berOStream.getArray();
	}
}
