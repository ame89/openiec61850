/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package org.openmuc.openiec61850.internal.mms.asn1;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerInteger;
import org.openmuc.jasn1.ber.types.BerNull;

import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

public final class WriteResponse {

    public final static class SubChoice {

        public byte[] code = null;
        public BerInteger failure = null;

        public BerNull success = null;

        public SubChoice() {
        }

        public SubChoice(byte[] code) {
            this.code = code;
        }

        public SubChoice(BerInteger failure, BerNull success) {
            this.failure = failure;
            this.success = success;
        }

        public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
            if (code != null) {
                for (int i = code.length - 1; i >= 0; i--) {
                    berOStream.write(code[i]);
                }
                return code.length;

            }
            int codeLength = 0;
            if (success != null) {
                codeLength += success.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)).encode(berOStream);
                return codeLength;

            }

            if (failure != null) {
                codeLength += failure.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)).encode(berOStream);
                return codeLength;

            }

            throw new IOException("Error encoding BerChoice: No item in choice was selected.");
        }

        public int decode(InputStream iStream, BerIdentifier berIdentifier) throws IOException {
            int codeLength = 0;
            BerIdentifier passedIdentifier = berIdentifier;
            if (berIdentifier == null) {
                berIdentifier = new BerIdentifier();
                codeLength += berIdentifier.decode(iStream);
            }
            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
                failure = new BerInteger();
                codeLength += failure.decode(iStream, false);
                return codeLength;
            }

            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
                success = new BerNull();
                codeLength += success.decode(iStream, false);
                return codeLength;
            }

            if (passedIdentifier != null) {
                return 0;
            }
            throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
        }

        public void encodeAndSave(int encodingSizeGuess) throws IOException {
            BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
            encode(berOStream, false);
            code = berOStream.getArray();
        }
    }

    public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
    protected BerIdentifier id;

    public byte[] code = null;
    public List<SubChoice> seqOf = null;

    public WriteResponse() {
        id = identifier;
    }

    public WriteResponse(byte[] code) {
        id = identifier;
        this.code = code;
    }

    public WriteResponse(List<SubChoice> seqOf) {
        id = identifier;
        this.seqOf = seqOf;
    }

    public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
        int codeLength;

        if (code != null) {
            codeLength = code.length;
            for (int i = code.length - 1; i >= 0; i--) {
                berOStream.write(code[i]);
            }
        } else {
            codeLength = 0;
            for (int i = (seqOf.size() - 1); i >= 0; i--) {
                codeLength += seqOf.get(i).encode(berOStream, true);
            }

            codeLength += BerLength.encodeLength(berOStream, codeLength);

        }

        if (explicit) {
            codeLength += id.encode(berOStream);
        }

        return codeLength;
    }

    public int decode(InputStream iStream, boolean explicit) throws IOException {
        int codeLength = 0;
        int subCodeLength = 0;
        seqOf = new LinkedList<SubChoice>();

        if (explicit) {
            codeLength += id.decodeAndCheck(iStream);
        }

        BerLength length = new BerLength();
        codeLength += length.decode(iStream);

        while (subCodeLength < length.val) {
            SubChoice element = new SubChoice();
            subCodeLength += element.decode(iStream, null);
            seqOf.add(element);
        }
        if (subCodeLength != length.val) {
            throw new IOException("Decoded SequenceOf or SetOf has wrong length tag");

        }
        codeLength += subCodeLength;

        return codeLength;
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(berOStream, false);
        code = berOStream.getArray();
    }
}
