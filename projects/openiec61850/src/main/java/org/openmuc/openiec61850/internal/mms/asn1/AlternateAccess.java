/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package org.openmuc.openiec61850.internal.mms.asn1;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerInteger;
import org.openmuc.jasn1.ber.types.BerNull;
import org.openmuc.jasn1.ber.types.string.BerVisibleString;

import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

public final class AlternateAccess {

    public final static class SubChoice {

        public byte[] code = null;

        public final static class SubSeq_selectAlternateAccess {

            public final static class SubChoice_accessSelection {

                public byte[] code = null;

                public final static class SubSeq_indexRange {

                    public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS,
                                                                                     BerIdentifier.CONSTRUCTED, 16);
                    protected BerIdentifier id;

                    public byte[] code = null;
                    public BerInteger lowIndex = null;

                    public BerInteger numberOfElements = null;

                    public SubSeq_indexRange() {
                        id = identifier;
                    }

                    public SubSeq_indexRange(byte[] code) {
                        id = identifier;
                        this.code = code;
                    }

                    public SubSeq_indexRange(BerInteger lowIndex, BerInteger numberOfElements) {
                        id = identifier;
                        this.lowIndex = lowIndex;
                        this.numberOfElements = numberOfElements;
                    }

                    public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

                        int codeLength;

                        if (code != null) {
                            codeLength = code.length;
                            for (int i = code.length - 1; i >= 0; i--) {
                                berOStream.write(code[i]);
                            }
                        } else {
                            codeLength = 0;
                            codeLength += numberOfElements.encode(berOStream, false);
                            codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)).encode(berOStream);

                            codeLength += lowIndex.encode(berOStream, false);
                            codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)).encode(berOStream);

                            codeLength += BerLength.encodeLength(berOStream, codeLength);
                        }

                        if (explicit) {
                            codeLength += id.encode(berOStream);
                        }

                        return codeLength;

                    }

                    public int decode(InputStream iStream, boolean explicit) throws IOException {
                        int codeLength = 0;
                        int subCodeLength = 0;
                        BerIdentifier berIdentifier = new BerIdentifier();
                        boolean decodedIdentifier = false;

                        if (explicit) {
                            codeLength += id.decodeAndCheck(iStream);
                        }

                        BerLength length = new BerLength();
                        codeLength += length.decode(iStream);

                        if (subCodeLength < length.val) {
                            if (decodedIdentifier == false) {
                                subCodeLength += berIdentifier.decode(iStream);
                                decodedIdentifier = true;
                            }
                            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
                                lowIndex = new BerInteger();
                                subCodeLength += lowIndex.decode(iStream, false);
                                decodedIdentifier = false;
                            } else {
                                throw new IOException("Identifier does not macht required sequence element identifer.");
                            }
                        }
                        if (subCodeLength < length.val) {
                            if (decodedIdentifier == false) {
                                subCodeLength += berIdentifier.decode(iStream);
                                decodedIdentifier = true;
                            }
                            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
                                numberOfElements = new BerInteger();
                                subCodeLength += numberOfElements.decode(iStream, false);
                                decodedIdentifier = false;
                            } else {
                                throw new IOException("Identifier does not macht required sequence element identifer.");
                            }
                        }
                        if (subCodeLength != length.val) {
                            throw new IOException("Decoded sequence has wrong length tag");

                        }
                        codeLength += subCodeLength;

                        return codeLength;
                    }

                    public void encodeAndSave(int encodingSizeGuess) throws IOException {
                        BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
                        encode(berOStream, false);
                        code = berOStream.getArray();
                    }
                }

                public BerVisibleString component = null;

                public BerInteger index = null;

                public SubSeq_indexRange indexRange = null;

                public BerNull allElements = null;

                public SubChoice_accessSelection() {
                }

                public SubChoice_accessSelection(byte[] code) {
                    this.code = code;
                }

                public SubChoice_accessSelection(BerVisibleString component, BerInteger index, SubSeq_indexRange indexRange, BerNull
                        allElements) {
                    this.component = component;
                    this.index = index;
                    this.indexRange = indexRange;
                    this.allElements = allElements;
                }

                public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
                    if (code != null) {
                        for (int i = code.length - 1; i >= 0; i--) {
                            berOStream.write(code[i]);
                        }
                        return code.length;

                    }
                    int codeLength = 0;
                    if (allElements != null) {
                        codeLength += allElements.encode(berOStream, false);
                        codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)).encode(berOStream);
                        return codeLength;

                    }

                    if (indexRange != null) {
                        codeLength += indexRange.encode(berOStream, false);
                        codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)).encode(berOStream);
                        return codeLength;

                    }

                    if (index != null) {
                        codeLength += index.encode(berOStream, false);
                        codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)).encode(berOStream);
                        return codeLength;

                    }

                    if (component != null) {
                        codeLength += component.encode(berOStream, false);
                        codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)).encode(berOStream);
                        return codeLength;

                    }

                    throw new IOException("Error encoding BerChoice: No item in choice was selected.");
                }

                public int decode(InputStream iStream, BerIdentifier berIdentifier) throws IOException {
                    int codeLength = 0;
                    BerIdentifier passedIdentifier = berIdentifier;
                    if (berIdentifier == null) {
                        berIdentifier = new BerIdentifier();
                        codeLength += berIdentifier.decode(iStream);
                    }
                    if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
                        component = new BerVisibleString();
                        codeLength += component.decode(iStream, false);
                        return codeLength;
                    }

                    if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
                        index = new BerInteger();
                        codeLength += index.decode(iStream, false);
                        return codeLength;
                    }

                    if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
                        indexRange = new SubSeq_indexRange();
                        codeLength += indexRange.decode(iStream, false);
                        return codeLength;
                    }

                    if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)) {
                        allElements = new BerNull();
                        codeLength += allElements.decode(iStream, false);
                        return codeLength;
                    }

                    if (passedIdentifier != null) {
                        return 0;
                    }
                    throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
                }

                public void encodeAndSave(int encodingSizeGuess) throws IOException {
                    BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
                    encode(berOStream, false);
                    code = berOStream.getArray();
                }
            }

            public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
            protected BerIdentifier id;

            public byte[] code = null;
            public SubChoice_accessSelection accessSelection = null;

            public AlternateAccess alternateAccess = null;

            public SubSeq_selectAlternateAccess() {
                id = identifier;
            }

            public SubSeq_selectAlternateAccess(byte[] code) {
                id = identifier;
                this.code = code;
            }

            public SubSeq_selectAlternateAccess(SubChoice_accessSelection accessSelection, AlternateAccess alternateAccess) {
                id = identifier;
                this.accessSelection = accessSelection;
                this.alternateAccess = alternateAccess;
            }

            public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

                int codeLength;

                if (code != null) {
                    codeLength = code.length;
                    for (int i = code.length - 1; i >= 0; i--) {
                        berOStream.write(code[i]);
                    }
                } else {
                    codeLength = 0;
                    codeLength += alternateAccess.encode(berOStream, true);

                    codeLength += accessSelection.encode(berOStream, true);

                    codeLength += BerLength.encodeLength(berOStream, codeLength);
                }

                if (explicit) {
                    codeLength += id.encode(berOStream);
                }

                return codeLength;

            }

            public int decode(InputStream iStream, boolean explicit) throws IOException {
                int codeLength = 0;
                int subCodeLength = 0;
                int choiceDecodeLength = 0;
                BerIdentifier berIdentifier = new BerIdentifier();
                boolean decodedIdentifier = false;

                if (explicit) {
                    codeLength += id.decodeAndCheck(iStream);
                }

                BerLength length = new BerLength();
                codeLength += length.decode(iStream);

                if (subCodeLength < length.val) {
                    if (decodedIdentifier == false) {
                        subCodeLength += berIdentifier.decode(iStream);
                        decodedIdentifier = true;
                    }
                    accessSelection = new SubChoice_accessSelection();
                    choiceDecodeLength = accessSelection.decode(iStream, berIdentifier);
                    if (choiceDecodeLength != 0) {
                        decodedIdentifier = false;
                        subCodeLength += choiceDecodeLength;
                    }
                }
                if (subCodeLength < length.val) {
                    if (decodedIdentifier == false) {
                        subCodeLength += berIdentifier.decode(iStream);
                        decodedIdentifier = true;
                    }
                    if (berIdentifier.equals(AlternateAccess.identifier)) {
                        alternateAccess = new AlternateAccess();
                        subCodeLength += alternateAccess.decode(iStream, false);
                        decodedIdentifier = false;
                    } else {
                        throw new IOException("Identifier does not macht required sequence element identifer.");
                    }
                }
                if (subCodeLength != length.val) {
                    throw new IOException("Decoded sequence has wrong length tag");

                }
                codeLength += subCodeLength;

                return codeLength;
            }

            public void encodeAndSave(int encodingSizeGuess) throws IOException {
                BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
                encode(berOStream, false);
                code = berOStream.getArray();
            }
        }

        public final static class SubSeq_named {

            public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
            protected BerIdentifier id;

            public byte[] code = null;
            public BerVisibleString componentName = null;

            public AlternateAccessSelection accesst = null;

            public SubSeq_named() {
                id = identifier;
            }

            public SubSeq_named(byte[] code) {
                id = identifier;
                this.code = code;
            }

            public SubSeq_named(BerVisibleString componentName, AlternateAccessSelection accesst) {
                id = identifier;
                this.componentName = componentName;
                this.accesst = accesst;
            }

            public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

                int codeLength;

                if (code != null) {
                    codeLength = code.length;
                    for (int i = code.length - 1; i >= 0; i--) {
                        berOStream.write(code[i]);
                    }
                } else {
                    codeLength = 0;
                    codeLength += accesst.encode(berOStream, true);

                    codeLength += componentName.encode(berOStream, false);
                    codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)).encode(berOStream);

                    codeLength += BerLength.encodeLength(berOStream, codeLength);
                }

                if (explicit) {
                    codeLength += id.encode(berOStream);
                }

                return codeLength;

            }

            public int decode(InputStream iStream, boolean explicit) throws IOException {
                int codeLength = 0;
                int subCodeLength = 0;
                int choiceDecodeLength = 0;
                BerIdentifier berIdentifier = new BerIdentifier();
                boolean decodedIdentifier = false;

                if (explicit) {
                    codeLength += id.decodeAndCheck(iStream);
                }

                BerLength length = new BerLength();
                codeLength += length.decode(iStream);

                if (subCodeLength < length.val) {
                    if (decodedIdentifier == false) {
                        subCodeLength += berIdentifier.decode(iStream);
                        decodedIdentifier = true;
                    }
                    if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
                        componentName = new BerVisibleString();
                        subCodeLength += componentName.decode(iStream, false);
                        decodedIdentifier = false;
                    } else {
                        throw new IOException("Identifier does not macht required sequence element identifer.");
                    }
                }
                if (subCodeLength < length.val) {
                    if (decodedIdentifier == false) {
                        subCodeLength += berIdentifier.decode(iStream);
                        decodedIdentifier = true;
                    }
                    accesst = new AlternateAccessSelection();
                    choiceDecodeLength = accesst.decode(iStream, berIdentifier);
                    if (choiceDecodeLength != 0) {
                        decodedIdentifier = false;
                        subCodeLength += choiceDecodeLength;
                    }
                }
                if (subCodeLength != length.val) {
                    throw new IOException("Decoded sequence has wrong length tag");

                }
                codeLength += subCodeLength;

                return codeLength;
            }

            public void encodeAndSave(int encodingSizeGuess) throws IOException {
                BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
                encode(berOStream, false);
                code = berOStream.getArray();
            }
        }

        public SubSeq_selectAlternateAccess selectAlternateAccess = null;

        public BerVisibleString component = null;

        public BerInteger index = null;

        public IndexRangeSeq indexRange = null;

        public BerNull allElements = null;

        public SubSeq_named named = null;

        public SubChoice() {
        }

        public SubChoice(byte[] code) {
            this.code = code;
        }

        public SubChoice(SubSeq_selectAlternateAccess selectAlternateAccess, BerVisibleString component, BerInteger index, IndexRangeSeq
                indexRange, BerNull allElements, SubSeq_named named) {
            this.selectAlternateAccess = selectAlternateAccess;
            this.component = component;
            this.index = index;
            this.indexRange = indexRange;
            this.allElements = allElements;
            this.named = named;
        }

        public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
            if (code != null) {
                for (int i = code.length - 1; i >= 0; i--) {
                    berOStream.write(code[i]);
                }
                return code.length;

            }
            int codeLength = 0;
            if (named != null) {
                codeLength += named.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)).encode(berOStream);
                return codeLength;

            }

            if (allElements != null) {
                codeLength += allElements.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)).encode(berOStream);
                return codeLength;

            }

            if (indexRange != null) {
                codeLength += indexRange.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)).encode(berOStream);
                return codeLength;

            }

            if (index != null) {
                codeLength += index.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)).encode(berOStream);
                return codeLength;

            }

            if (component != null) {
                codeLength += component.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)).encode(berOStream);
                return codeLength;

            }

            if (selectAlternateAccess != null) {
                codeLength += selectAlternateAccess.encode(berOStream, false);
                codeLength += (new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)).encode(berOStream);
                return codeLength;

            }

            throw new IOException("Error encoding BerChoice: No item in choice was selected.");
        }

        public int decode(InputStream iStream, BerIdentifier berIdentifier) throws IOException {
            int codeLength = 0;
            BerIdentifier passedIdentifier = berIdentifier;
            if (berIdentifier == null) {
                berIdentifier = new BerIdentifier();
                codeLength += berIdentifier.decode(iStream);
            }
            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
                selectAlternateAccess = new SubSeq_selectAlternateAccess();
                codeLength += selectAlternateAccess.decode(iStream, false);
                return codeLength;
            }

            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
                component = new BerVisibleString();
                codeLength += component.decode(iStream, false);
                return codeLength;
            }

            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)) {
                index = new BerInteger();
                codeLength += index.decode(iStream, false);
                return codeLength;
            }

            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)) {
                indexRange = new IndexRangeSeq();
                codeLength += indexRange.decode(iStream, false);
                return codeLength;
            }

            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)) {
                allElements = new BerNull();
                codeLength += allElements.decode(iStream, false);
                return codeLength;
            }

            if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)) {
                named = new SubSeq_named();
                codeLength += named.decode(iStream, false);
                return codeLength;
            }

            if (passedIdentifier != null) {
                return 0;
            }
            throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
        }

        public void encodeAndSave(int encodingSizeGuess) throws IOException {
            BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
            encode(berOStream, false);
            code = berOStream.getArray();
        }
    }

    public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
    protected BerIdentifier id;

    public byte[] code = null;
    public List<SubChoice> seqOf = null;

    public AlternateAccess() {
        id = identifier;
    }

    public AlternateAccess(byte[] code) {
        id = identifier;
        this.code = code;
    }

    public AlternateAccess(List<SubChoice> seqOf) {
        id = identifier;
        this.seqOf = seqOf;
    }

    public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
        int codeLength;

        if (code != null) {
            codeLength = code.length;
            for (int i = code.length - 1; i >= 0; i--) {
                berOStream.write(code[i]);
            }
        } else {
            codeLength = 0;
            for (int i = (seqOf.size() - 1); i >= 0; i--) {
                codeLength += seqOf.get(i).encode(berOStream, true);
            }

            codeLength += BerLength.encodeLength(berOStream, codeLength);

        }

        if (explicit) {
            codeLength += id.encode(berOStream);
        }

        return codeLength;
    }

    public int decode(InputStream iStream, boolean explicit) throws IOException {
        int codeLength = 0;
        int subCodeLength = 0;
        seqOf = new LinkedList<SubChoice>();

        if (explicit) {
            codeLength += id.decodeAndCheck(iStream);
        }

        BerLength length = new BerLength();
        codeLength += length.decode(iStream);

        while (subCodeLength < length.val) {
            SubChoice element = new SubChoice();
            subCodeLength += element.decode(iStream, null);
            seqOf.add(element);
        }
        if (subCodeLength != length.val) {
            throw new IOException("Decoded SequenceOf or SetOf has wrong length tag");

        }
        codeLength += subCodeLength;

        return codeLength;
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(berOStream, false);
        code = berOStream.getArray();
    }
}
